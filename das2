
#include <stdio.h>
#include <stdlib.h>

struct Node
{
    int data;
    struct Node *next;
} *head = NULL;

void create(int n)
{
    int i, num;
    struct Node *t, *last;
    head = (struct Node *)malloc(sizeof(struct Node));
    printf("Enter the 1st node: ");
    scanf("%d", &num);
    head->data = num;
    head->next = NULL;
    last = head;

    for (int i = 2; i <= n; i++)
    {
        int j;
        t = (struct Node *)malloc(sizeof(struct Node));
        printf("Enter the %d node: ", i);
        scanf("%d", &j);
        t->data = j;
        t->next = NULL;
        last->next = t;
        last = t;
    }
    last->next = head;
}

int count(struct Node *p)
{
    int len = 0;
    do
    {
        len++;
        p = p->next;
    } while (p != head);
    return len;
}

void Display(struct Node *p)
{

    if (p == NULL)
    {
        printf("List is Empty\n");
        return;
    }
    do
    {
        printf("%d", p->data);
        p = p->next;
        printf("->");
    } while (p != head);
    printf("\n");
}

int Delete(struct Node *p, int index)
{
    struct Node *q;
    int x = -1;
    if (index < 0 || index > count(head))
    {
        return x;
    }

    if (index == 1)
    {
        while (p->next != head)
        {
            p = p->next;
        }
        if (head == p)
        {

            free(head);
            head = NULL;
        }
        else
        {
            p->next = head->next;
            x = head->data;

            free(head);
            head = p->next;
        }
    }

    else
    {

        for (int i = 0; i < index - 2; i++)
        {

            p = p->next;
        }
        q = p->next;
        p->next = q->next;
        x = q->data;

        free(q);
    }
    return x;
}

int main()
{
    int k, index;
    printf("Enter no. of nodes: ");
    scanf("%d", &k);
    create(k);
    printf("\n");

    Display(head);
    printf("\n");

    printf("Enter the index after which you want to delete: ");
    scanf("%d", &index);
    Delete(head, index);

    printf("\n");
    Display(head);

    return 0;
}